<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Disable the discrete GPU to fix "Window Server Service only ran for 0 seconds" in High Sierra.md]]></title>
    <url>%2F2017%2F10%2F04%2F%E5%B1%8F%E8%94%BD%E7%8B%AC%E6%98%BE%2F</url>
    <content type="text"><![CDATA[Disable the discrete GPU to fix “Window Server Service only ran for 0 seconds” in High Sierra 写在前面最近我根据 RehabMan 的 hotpatch 添加了一些路径做了一个屏蔽独显得 hotpatch 来屏蔽独显解决一些升级 10.13 后因为 nv_disable 参数失效而卡在 Window Server Service only ran for 0 seconds 的错误，发现有些成功，有些失败。于是把我琢磨到的一种方法分享给大家！希望该帖子能帮助到各位！ 感谢： PCBETA (远景论坛) yearjinheng 版主的帖子 tonymacx86.com Rehabman 的帖子 转载请注明 原贴地址 屏蔽独显方法不一： 第一种：直接在 DSDT SSDT 上做修改 第二种：手动制作一个适合自己机器的 hotpatch 屏蔽独显达到屏蔽独显的作用 开工 本帖大致思路如下： 提取 ACPI 原始表单 反编译这些文件 搜索一个名为 _OFF 的方法 检查文件的结果以确定 _OFF 的路径 修改 RehabMan 的 hotpatch 加入自己的路径 提取 ACPI 原始表单并提取 _OFF 路径 打开电脑进入四叶草引导界面，按下 F4 或者 FN+F4 即可提取原始表单到 /EFI/CLOVER/ACPI/origin ，然后进入 MAC 将 origin 拷贝到桌面删掉除 SSDT DSDT 之外的所有 aml 文件，打开终端： 1234$ cd ~/Desktop/origin $ iasl -da -dl *.aml $ rm *.aml $ grep -l Method.*_OFF *.dsl 以我修改的一个机器为例，上一条命令得到的结果如下 1234DSDT.dslSSDT-7.dslSSDT-8.dslSSDT-9.dsl 依次打开这四个表单搜索 _OFF ，找到一个类似于下面这个函数： 图片左下角的路径就是我们最终所需要的: 1_SB.PCI0.RP05.PEGP 修改 RehabMan 的 hotpatch 添加这个路径 首先去 RehanMan 的 GitHub 下载 hotpatch 包 1https://github.com/RehabMan/OS-X-Clover-Laptop-Config.git 我们只需要 SSDT-Disable_DGPU 这个文件，编译成 aml 文件 1$ iasl SSDT-Disable_DGPU.dsl 打开编译后得到的 aml 文件 按照这个格式添加自己的路径 保存放到 /EFI/CLOVER/ACPI/patched 一个注意点 如果在 Config.plist 中使用了 SortedOrder (通常 Clover 安装后默认没有设置)，需要在其内添加 SSDT-Disable_DGPU.aml 这一项。因为如果指定了 SortedOrder ，则 Clover 只加载其中指定的 SSDT 。如果没有出现在列表中,即使在 ACPI/patched 中，它也不会加载。 完工]]></content>
      <categories>
        <category>Hacintosh</category>
      </categories>
      <tags>
        <tag>黑苹果</tag>
        <tag>Hacintosh</tag>
        <tag>Window Server Service only ran for 0 seconds</tag>
        <tag>Disable DGPU</tag>
        <tag>屏蔽独显</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git代码本地远程之间的同步]]></title>
    <url>%2F2017%2F09%2F27%2Fgit%20%E4%BB%A3%E7%A0%81%E6%9C%AC%E5%9C%B0%E8%BF%9C%E7%A8%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E5%90%8C%E6%AD%A5%2F</url>
    <content type="text"><![CDATA[git代码本地远程之间的同步转载请注明原出处 代码放到 git 仓库，然后本地修改同步至仓库，这在生活中是很常见的，下面是一个最简单的案例远程仓库内容同步到本地仓库 新建一个本地仓库用于后续工作 123$ cd ~/Desktop/$ mkdir test $ cd test 初始化这个本地目录 1$ git init 关联到远程仓库(以我新建的 Test 这个仓库为例) 1$ git remote add origin https://github.com/athlonreg/Test.git 合并远程仓库的文件到本地 1$ git pull --rebase origin master 修改本地仓库并推送到远程仓库 对本地仓库的一些修改 123$ mkdir inner $ cd inner $ touch a.txt 现在将我新建的 inner 目录和 a.txt 文档推送到远程仓库 git add 命令添加新建目录与文件 1$ git add . git commit 提交修改，引号内为修改的概要 1$ git commit -m &quot;add some files&quot; 这里会提示配置用户身份(两条命令的引号内分别为你 github 账号绑定的邮箱和用户名) 12$ git config --global user.email &quot;15563836030@163.com&quot; $ git config --global user.name &quot;athlonreg&quot; 这是继续提交修改就可以了 1$ git commit -m &quot;add some files&quot; 推送修改后的本地仓库到远程仓库 1$ git push -u origin master 这时终端会让你输入你的 github 用户名和密码，根据提示输入完，就推送完成了，再去 github 网页端就发现仓库已经更新至和本地相同了。 Windows 用户安装好 git 可以利用 git bash 来操作 下面是我在 Windows 下利用 git bash 工具的一些截图，大家可以作参考]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>同步</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How to build Clover from source]]></title>
    <url>%2F2017%2F09%2F20%2FHow-to-build-Clover-from-source%2F</url>
    <content type="text"><![CDATA[How to build Clover from source原出处 Compiling from sourceTo compile a project you need a compiler and libraries - it’s a truism. What needs to be done in this particular case? The libraries are covered by the EDK2 environment from http://sourceforge.net/projects/edk2. Due to the fact that this project was created for a Hackintosh, focus will be set on the compilation process under Mac OS X. Nevertheless, this is not the only option. EDK2 was designed for a compilation on different systems like Windows, Linux, and others. Visual Studio 20xx is needed for Windows, Xcode Command Line Tools for Mac OS X, and gcc for Linux. The pre-bundled software are still not enough for a successful compilation under Mac. The recommendation is - same as for Linux - to build a new version of gcc using the script “buildgcc.sh” from Clover’s directory. Why not clang? - It still does not produce any working code. Let’s not give up hope, though. Now to the real deal. A reader who came to this section cannot be a simple user by definition and thus it is not necessary to explain how to use a terminal. How to buildDownload the source code and prepare the environment1234567mkdir srccd srcsvn co -r 18198 svn://svn.code.sf.net/p/edk2/code/trunk/edk2 edk2cd edk2make -C BaseTools/Source/Csvn co svn://svn.code.sf.net/p/cloverefiboot/code Clover cd Clover Building the compiler. gcc-4.9. This is the compiler that can do LTO optimization.123./buildgettext.sh./buildgcc-4.9.sh ./buildnasm.sh Adapting the EDK2 environment to our needs12./edksetup.sh cp -R Clover/Patches_for_EDK2/* ./ How to updateIn the case you already did all these steps and just want to update Clover then no need to repeat this steps. Just do:12cd Cloversvn up Now it is possible to build CloverEFI. For example like this:123./ebuild.sh./ebuild.sh -mc./ebuild.sh --ia32 Other compilation scripts are available and usually they are documented. Look, choose and decide for yourself, which one you want to use. Small note: HFSPlus.efi is not available in the repository. There are two options: You can find it somewhere else or change the project definition files .fdf to use the open driver VboxHfs instead of the private one. It is a bit slower and has some downsides that will probably be corrected in future, but it is functional. Change:123# foreign file system support#INF Clover/VBoxFsDxe/VBoxHfs.infINF RuleOverride=BINARY Clover/HFSPlus/HFSPlus.inf to: 123# foreign file system supportINF Clover/VBoxFsDxe/VBoxHfs.inf#INF RuleOverride=BINARY Clover/HFSPlus/HFSPlus.inf This project does not stand still and that is why this instruction may become obsolete because of some small change. This project is for people who think and for those who can figure out what is wrong and what to do.Building the installer package123cd ~/src/edk2/Clover/CloverPackage/./makepkg./makeiso That’s all! Some steps can be left out if you do this process repeatedly. For example you can issue an “svn up” instead of re-downloading the whole project one more time, exclude the 32-bit compilation process and skip compiling. New users can use automated scripts CloverGrower and its Pro version, however they should think about just using the pre-made installer package first.And now, as everything is ready, you can do the installation.]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Clover</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开拓者开发团队启动会议]]></title>
    <url>%2F2017%2F09%2F19%2F%E5%BC%80%E6%8B%93%E8%80%85%E5%BC%80%E5%8F%91%E5%9B%A2%E9%98%9F%E5%90%AF%E5%8A%A8%E4%BC%9A%E8%AE%AE%2F</url>
    <content type="text"><![CDATA[开拓者开发团队启动会议 团队启动会议开拓者开发团队工作章程基本信息1、开拓者开发团队组员：团队由孙永辉，张海陆，罗中运组成，其中罗中运担任团队组长。2、团队宗旨：开发中进步，进步中开发。 团队开发1、由于组内成员为舍友关系，每周周二晚上和周末为开发时间，地点在宿舍和图书馆，以便随时分享个人成果为团队作积极贡献。2、每周二晚上开始团队开发工作前的半个小时召开团队例会，总结上周成果并确定本周任务，各成员简述遇到的开发困难和开发心得，并对项目的开发提出切合实际的想法，最后由组长总结例会内容，制定每周开发计划。 团队管理1、所有团队成员必须参加每次的团队例会，每次的例会计划由组长提前一天通知，如有意外情况需要调整计划，组长务必提前通知。因特殊情况不能参加例会的需要向组长请假。2、为了提高团队的开发积极性和开发效率，所有成员应做好自己的任务，不许迟到早退。3、团队成员应当具有自学和互学的能力和素质，团队之间提倡交流，综合提高团队成员的综合素质，进而使团队成员共同进步。4、组长应积极与老师进行交流，将项目的要求理解到位，并在团队遇到开发困难时主动向老师寻求帮助。5、每周的团体例会应当简短精悍，组长通知后团队成员应当事先认真准备。会议中应当认真做会议内容整理，确保每次会议的意义所在。 团队建设1、为了保证团队成员身体健康，每名组员每周至少三次参加体育锻炼，让自己时刻保持足够的精力进行团队共同建设。2、团队之间要有足够的交流时间，积极分享学习成果和经验，促进团队的共同进步。3、在每次阶段性目标达成之后，团队都要组织一次出游或者聚餐，提高团队的贡献积极性，由组长组织安排。]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[价牌翻转问题]]></title>
    <url>%2F2017%2F09%2F18%2F%E4%BB%B7%E7%89%8C%E7%BF%BB%E8%BD%AC%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[价牌翻转问题 问题描述 思路1、已知是一个四位数，那么共有1001-9999种情况；2、一个数颠倒之后，数字顺序颠倒并且每个数字颠倒，例如1269颠倒之后就是6921；3、0不能是第一位也不能是最后一位。 代码实现1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include&lt;stdio.h&gt;#include&lt;math.h&gt;int array[4]=&#123;0&#125;;int inverse(int a)&#123;//求一个数颠倒之后的结果 int b=0; int arr[4]=&#123;0&#125;; for(int i=0;i&lt;4;i++)&#123; arr[i]=(int)(a/pow(10,3-i))%10; if(arr[i]==9) b+=6*pow(10,i); else if(arr[i]==6) b+=9*pow(10,i); else b+=arr[i]*pow(10,i); &#125; return b;&#125;int main()&#123; int i,j; int k=0,l=0; int temp; int flag; int up[50]=&#123;0&#125;,down[50]=&#123;0&#125;;//分别存放赚钱和赔钱的价牌 for(i=1001;i&lt;10000;i++)&#123; temp=i; flag=1; for(j=0;j&lt;4;j++)&#123; array[j]=(int)(temp/pow(10,3-j))%10; if(array[j]==3||array[j]==4||array[j]==7)&#123;//分割数字排除不能翻转的数字 flag=0; break; &#125; &#125; if(flag)&#123; if(array[0]==0 || array[3]==0)//0不能位于第一位和最后一位 continue; if(inverse(i)-i&gt;800&amp;&amp;inverse(i)-i&lt;900) up[k++]=i; if(i-inverse(i)&gt;200&amp;&amp;i-inverse(i)&lt;300) down[l++]=i; &#125; &#125; for(i=0;i&lt;50;i++)&#123;//依次输出赚钱的原价，颠倒价、赚的钱、赔钱的原价、颠倒价、赔的钱 for(j=0;j&lt;50;j++)&#123; if((inverse(up[i])-up[i])-(down[j]-inverse(down[j]))==558)&#123; printf(&quot;%d\t%d\t%d\t&quot;,up[i],inverse(up[i]),inverse(up[i])-up[i]); printf(&quot;%d\t%d\t%d\n&quot;,down[j],inverse(down[j]),down[j]-inverse(down[j])); &#125; &#125; &#125; return 0;&#125; 运行结果：]]></content>
      <categories>
        <category>Arithmetics</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>算法</tag>
        <tag>价牌翻转</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[警匪110问题]]></title>
    <url>%2F2017%2F09%2F18%2F%E8%AD%A6%E5%8C%AA110%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[警匪110问题 问题描述 思路1、一共九个数字，八个操作符；2、每个操作符有三种情况，即留空、加或者减，分别用0、1和2表示；3、共有 3^8 种情况，遍历每种情况判断输出；4、需要注意的是留空和’+’、’-‘需要分开处理，因为留空之后需要将其前后的数据连在一起。5、以12+34+56+7-8+9为例，给和sum赋初值为0，第一次循环操作符为留空，需要先加上第一位的1，然后进行这一次运算，即1x10+2，然后下一次循环操作符为+，需要计算的就是12+3，同理在3、4之间的空需要计算的是3x10+4，而不是（12+3）x10+4，所以需要一个临时变量来记录上次的操作数，还需要一个变量来记录上次的操作符将上次的结果进行统计处理，原因就在于我们无法确定下次的操作符是不是留空。6、由于我们在统计和时，只有在下一次循环才能处理最后一个操作数，所以需要将9最后单独处理。 代码实现12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include &lt;stdio.h&gt; #include &lt;math.h&gt; int main() &#123; int a[9]=&#123;1,2,3,4,5,6,7,8,9&#125;; int sum; int temp; int oper,lastoper; int number; int i,j; for(i=0;i&lt;pow(3,8);i++) &#123; sum=0; temp=1; lastoper=1; number=i; for(j=1;j&lt;=8;j++) &#123; //操作八次 oper=number%3; number=number/3; if (!oper) temp=temp*10+a[j]; //留空单独处理 if (oper==1) &#123; //当前操作符 if(lastoper==1)&#123; //前一次操作符 sum=sum+temp; temp=a[j]; &#125; if(lastoper==2)&#123; sum=sum-temp; temp=a[j]; &#125; lastoper=oper; //更新上次操作符 &#125; if(oper==2)&#123; if(lastoper==1)&#123; sum=sum+temp; temp=a[j]; &#125; if(lastoper==2)&#123; sum=sum-temp; temp=a[j]; &#125; lastoper=oper; &#125; &#125; if(lastoper==1) //第九次操作单独处理 sum=sum+temp; if(lastoper==2) sum=sum-temp; if(sum==110) &#123; number=i; for(j=1;j&lt;=8;j++) &#123; printf(&quot;%d&quot;,a[j-1]); oper=number%3; number=number/3; if(oper==1) printf(&quot;+&quot;); if(oper==2) printf(&quot;-&quot;); else continue; &#125; printf(&quot;9\n&quot;); &#125; &#125; return 0;&#125; 运行结果]]></content>
      <categories>
        <category>Arithmetics</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>算法</tag>
        <tag>警匪110</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[派遣敢死队问题]]></title>
    <url>%2F2017%2F09%2F18%2F%E6%B4%BE%E9%81%A3%E6%95%A2%E6%AD%BB%E9%98%9F%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[派遣敢死队问题 问题描述 思路1、首先将所有士兵直属上级的编号放于数组a；2、每个人有两种选择，去和不去，用0和1表示，转换为二进制放于数组b；3、最后判断每个士兵是不是与其直属上级同时执行任务，进而对count进行统计。 代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;stdio.h&gt; #include &lt;math.h&gt; int main() &#123; int number; int count=0; int flag; scanf(&quot;%d&quot;,&amp;number);//派遣的人数 int i,j; int temp; int a[number],b[number];//a a[0]=0;//将军 for(i=1;i&lt;number;i++)&#123; scanf(&quot;%d&quot;,&amp;a[i]);//每个人的直属上级 &#125; for(i=1;i&lt;pow(2,number);i++)&#123; temp=i; for(j=0;j&lt;number;j++)&#123; //遍历所有情况 b[j]=temp%2; temp/=2; &#125; flag=1; for(j=1;j&lt;number;j++)&#123; //将军没有上级，不用判断 if(b[j]==1&amp;&amp;b[a[j]-1]==1)&#123; //判断是否士兵和上级同时执行任务 //b[j]为编号为j+1的士兵去不去 //b[a[j]-1]为编号为j+1的士兵的直接上级去不去 flag=0; break; &#125; &#125; if(flag==1) count++; &#125; printf(&quot;%d\n&quot;,count); return 0;&#125; 运行结果]]></content>
      <categories>
        <category>Arithmetics</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>算法</tag>
        <tag>派遣敢死队</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2017-09-16-macOS High Sierra 10.13 原版镜像集合]]></title>
    <url>%2F2017%2F09%2F16%2FmacOS-High-Sierra-10-13-%E5%8E%9F%E7%89%88%E9%95%9C%E5%83%8F%E9%9B%86%E5%90%88%2F</url>
    <content type="text"><![CDATA[macOS High Sierra 10.13 原版镜像集合 12345678910DP1：链接:http://pan.baidu.com/s/1eRYNXL4 密码:29b8DP2：链接:http://pan.baidu.com/s/1o7AReQI 密码:3hi2DP3：链接:http://pan.baidu.com/s/1o8UKbu6 密码:usioDP4：链接:http://pan.baidu.com/s/1qXSxV2W 密码:a9gvDP5：链接:http://pan.baidu.com/s/1kV9l6CZ 密码:7t93DP6：链接:http://pan.baidu.com/s/1kVsqV0j 密码:033cDP7：链接:http://pan.baidu.com/s/1qXKrARM 密码:lbj0DP8：链接:http://pan.baidu.com/s/1c1Z9kbQ 密码:9nmrDP9：链接:http://pan.baidu.com/s/1micaQ1M 密码:dp1zGM:：链接:http://pan.baidu.com/s/1qY9Jw1u 密码:zzoo]]></content>
      <categories>
        <category>Hacintosh</category>
      </categories>
      <tags>
        <tag>黑苹果</tag>
        <tag>Hacintosh</tag>
        <tag>镜像</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS 打开任何来源]]></title>
    <url>%2F2017%2F09%2F15%2FmacOS-%E6%89%93%E5%BC%80%E4%BB%BB%E4%BD%95%E6%9D%A5%E6%BA%90%2F</url>
    <content type="text"><![CDATA[macOS 打开任何来源 许多朋友升级到 macOS Sierra 后在”安全性与隐私”中找不到”任何来源”选项，这里我教给大家怎么打开”任何来源”。 打开终端，输入以下代码回车： 1sudo spctl --master-disable 会提示输入密码，根据提示输入密码回车之后就可以在”安全性与隐私”中打开”任何来源”选项了]]></content>
      <categories>
        <category>Hacintosh</category>
      </categories>
      <tags>
        <tag>黑苹果</tag>
        <tag>Hacintosh</tag>
        <tag>终端</tag>
        <tag>任何来源</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NexT使用详解]]></title>
    <url>%2F2017%2F09%2F14%2FNexT%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[NexT基本使用转自官方说明文档 前言Hexo 是高效的静态站点生成框架，她基于 Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 标签插件 来快速的插入特定形式的内容。在这篇文章中，假定你已经成功安装了 Hexo，并使用 Hexo 提供的命令创建了一个站点。 在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。 为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。 安装 NexTHexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。具体到 NexT 来说，安装步骤如下。 下载主题在终端窗口下，定位到 Hexo 站点目录下。使用 Git checkout 代码：12$ cd your-hexo-site$ git clone https://github.com/iissnan/hexo-theme-next themes/next 启用主题与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开站点配置文件， 找到 theme 字段，并将其值更改为 next。 启用 NexT 主题 1theme: next 验证主题首先启动 Hexo 本地站点，并开启调试模式（即加上 –debug），整个命令是 hexo s –debug 。 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出： 1INFO hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 此时即可使用浏览器访问 http://localhost:4000 ，检查站点是否正确运行。 成功安装并启用了 NexT 主题后。下一步我们将要更改一些主题的设定，包括个性化以及集成第三方服务。 主题设定选择 SchemeScheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是： 123Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白Mist - Muse 的紧凑版本，整洁有序的单栏外观Pisces - 双栏 Scheme，小家碧玉似的清新 Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 去除即可。 选择 Pisces Scheme 123#scheme: Muse#scheme: Mistscheme: Pisces 设置 语言编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下： 1language: zh-Hans 目前 NexT 支持的语言如以下表格所示： 语言 代码 示例 English en language: en 简体中文 zh-Hans language: zh-Hans Français fr-FR language: fr-FR Português pt language: pt or language: pt-BR 繁體中文 zh-hk 或者 zh-tw language: zh-hk Русский язык ru language: ru Deutsch de language: de 日本語 ja language: ja Indonesian id language: id Korean ko language: ko 设置菜单菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。 NexT 使用的是 Font Awesome 提供的图标， Font Awesome 提供了 600+ 的图标，可以满足绝大的多数的场景，同时无须担心在 Retina 屏幕下 图标模糊的问题。 编辑 主题配置文件，修改以下内容： 设定菜单内容，对应的字段是 menu。 菜单内容的设置格式是：item name: link。其中 item name 是一个名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译。 菜单示例配置 1234567menu: home: / archives: /archives #about: /about #categories: /categories tags: /tags #commonweal: /404.html 若你的站点运行在子目录中，请将链接前缀的 / 去掉 NexT 默认的菜单项有 键值 设定值 显示文本 home home: / 主页 archives archives: /archives 归档页 categories categories: /categories 分类页 tags tags: /tags 标签页 about about: /about 关于页面 commonweal commonweal: /404.html 公益 404 2.设置菜单项的显示文本。在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用 这个名称查找对应的语言翻译，并提取显示文本。这些翻译文本放置在 NexT 主题目录下的 languages/{language}.yml （{language} 为你所使用的语言）。 以简体中文为例，若你需要添加一个菜单项，比如 something。那么就需要修改简体中文对应的翻译文件 languages/zh-Hans.yml，在 menu 字段下添加一项： 123456789menu: home: 首页 archives: 归档 categories: 分类 tags: 标签 about: 关于 search: 搜索 commonweal: 公益404 something: 有料 3.设定菜单项的图标，对应的字段是 menu_icons。 此设定格式是 item name: icon name，其中 item name 与上一步所配置的菜单名字对应，icon name 是 Font Awesome 图标的 名字。而 enable 可用于控制是否显示图标，你可以设置成 false 来去掉图标。 菜单图标配置示例 123456789menu_icons: enable: true # Icon Mapping. home: home about: user categories: th tags: tags archives: archive commonweal: heartbeat 在菜单图标开启的情况下，如果菜单项与菜单未匹配（没有设置或者无效的 Font Awesome 图标名字） 的情况下，NexT 将会使用 ? 作为图标。 请注意键值（如 home）的大小写要严格匹配 设置 侧栏默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。 可以通过修改 主题配置文件 中的 sidebar 字段来控制侧栏的行为。侧栏的设置包括两个部分，其一是侧栏的位置， 其二是侧栏显示的时机。 1.设置侧栏的位置，修改 sidebar.position 的值，支持的选项有： 12left - 靠左放置right - 靠右放置 目前仅 Pisces Scheme 支持 position 配置。影响版本5.0.0及更低版本。 12sidebar: position: left 2.设置侧栏显示的时机，修改 sidebar.display 的值，支持的选项有： post 默认行为，在文章页面（拥有目录列表）时显示 always 在所有页面中都显示 hide 在所有页面中都隐藏（可以手动展开） remove 完全移除 12sidebar: display: post 已知侧栏在 use motion: false 的情况下不会展示。 影响版本5.0.0及更低版本。 设置 头像编辑 主题配置文件， 修改字段 avatar， 值设置成头像的链接地址。其中，头像的链接地址可以是： 地址 值 完整的互联网URI http://example.com/avatar.png 站点内的地址 将头像放置主题目录下的 source/uploads/ (新建 uploads 目录若不存在)，配置为：avatar: /uploads/avatar.png；或者 放置在 source/images/ 目录下，配置为：avatar: /images/avatar.png 头像设置示例 1avatar: http://example.com/avatar.png 设置作者昵称编辑站点配置文件， 设置 author 为你的昵称。 站点描述编辑站点配置文件， 设置 description 字段为你的站点描述。站点描述可以是你喜欢的一句签名 : ) 主题配置设置 RSSNexT 中 RSS 有三个设置选项，满足特定的使用场景。 更改 主题配置文件，设定 rss 字段的值： 123false： 禁用 RSS，不在页面上显示 RSS 连接。留空： 使用 Hexo 生成的 Feed 链接。 你可以需要先安装 hexo-generator-feed 插件。具体的链接地址：适用于已经烧制过 Feed 的情形。 添加「标签」页面新建「标签」页面，并在菜单中显示「标签」链接。「标签」页面将展示站点的所有标签，若你的所有文章都未包含标签，此页面将是空的。 底下代码是一篇包含标签的文章的例子： 12345title: 标签测试文章tags: - Testing - Another Tag--- 请参阅 Hexo 的分类与标签文档，了解如何为文章添加标签或者分类。 新建页面在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 tags ： 12$ cd your-hexo-site$ hexo new page tags 设置页面类型编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下： 1234title: 标签date: 2014-12-22 12:39:04type: &quot;tags&quot;--- 在菜单中添加链接。编辑 主题配置文件 ， 添加 tags 到 menu 中，如下:1234menu: home: / archives: /archives tags: /tags 注意：如果有集成评论服务，页面也会带有评论。 若需要关闭的话，请添加字段 comments 并将值设置为 false，如： 禁用评论示例 12345title: 标签date: 2014-12-22 12:39:04type: &quot;tags&quot;comments: false--- 添加「分类」页面新建「分类」页面，并在菜单中显示「分类」链接。「分类」页面将展示站点的所有分类，若你的所有文章都未包含分类，此页面将是空的。 底下代码是一篇包含分类的文章的例子： 123title: 分类测试文章categories: Testing--- 请参阅 Hexo 的分类与标签文档，了解如何为文章添加标签或者分类。 新建页面在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 categories ： 12$ cd your-hexo-site$ hexo new page categories 设置页面类型编辑刚新建的页面，将页面的 type 设置为 categories ，主题将自动为这个页面显示分类。页面内容如下： 1234title: 分类date: 2014-12-22 12:39:04type: &quot;categories&quot;--- 修改菜单在菜单中添加链接。编辑 主题配置文件 ， 添加 categories 到 menu 中，如下: 1234menu: home: / archives: /archives categories: /categories 注意：如果有集成评论服务，页面也会带有评论。 若需要关闭的话，请添加字段 comments 并将值设置为 false，如： 禁用评论示例 12345title: 分类date: 2014-12-22 12:39:04type: &quot;categories&quot;comments: false--- 设置字体 注意： 此特性在版本 5.0.1 中引入，要使用此功能请确保所使用的 NexT 版本在此之后 为了解决 Google Fonts API 不稳定的问题，NexT 在 5.0.1 中引入此特性。 通过此特性，你可以指定所使用的字体库外链地址；与此同时，NexT 开放了 5 个特定范围的字体设定，他们是： 123456789全局字体：定义的字体将在全站范围使用标题字体：文章内标题的字体（h1, h2, h3, h4, h5, h6）文章字体：文章所使用的字体Logo字体：Logo 所使用的字体代码字体： 代码块所使用的字体各项所指定的字体将作为首选字体，当他们不可用时会自动 Fallback 到 NexT 设定的基础字体组：非代码类字体：Fallback 到 &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, sans-serif代码类字体： Fallback 到 consolas, Menlo, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, monospace 另外，每一项都有一个额外的 external 属性，此属性用来控制是否使用外链字体库。 开放此属性方便你设定那些已经安装在系统中的字体，减少不必要的请求（请求大小）。 配置示例 12345678910111213141516171819202122232425262728293031font: enable: true # 外链字体库地址，例如 //fonts.googleapis.com (默认值) host: # 全局字体，应用在 body 元素上 global: external: true family: Monda # 标题字体 (h1, h2, h3, h4, h5, h6) headings: external: true family: Roboto Slab # 文章字体 posts: external: true family: # Logo 字体 logo: external: true family: Lobster Two size: 24 # 代码字体，应用于 code 以及代码块 codes: external: true family: PT Mono 设置代码高亮主题NexT 使用 Tomorrow Theme 作为代码高亮，共有5款主题供你选择。 NexT 默认使用的是 白色的 normal 主题，可选的值有 normal，night， night blue， night bright， night eighties。 更改 highlight_theme 字段，将其值设定成你所喜爱的高亮主题，例如： 高亮主题设置示例 1234# Code Highlight theme# Available value: normal | night | night eighties | night blue | night bright# https://github.com/chriskempson/tomorrow-themehighlight_theme: normal 侧边栏社交链接侧栏社交链接的修改包含两个部分，第一是链接，第二是链接图标。 两者配置均在 主题配置文件 中。 1.链接放置在 social 字段下，一行一个链接。其键值格式是 显示文本: 链接地址。 配置示例 1234567# Social linkssocial: GitHub: https://github.com/your-user-name Twitter: https://twitter.com/your-user-name 微博: http://weibo.com/your-user-name 豆瓣: http://douban.com/people/your-user-name 知乎: http://www.zhihu.com/people/your-user-name 2.设定链接的图标，对应的字段是 social_icons。其键值格式是 匹配键: Font Awesome 图标名称， 匹配键 与上一步所配置的链接的 显示文本 相同（大小写严格匹配），图标名称 是 Font Awesome 图标的名字（不必带 fa- 前缀）。 enable 选项用于控制是否显示图标，你可以设置成 false 来去掉图标。 配置示例 1234567# Social Iconssocial_icons: enable: true # Icon Mappings GitHub: github Twitter: twitter 微博: weibo 开启打赏功能 由 habren 贡献越来越多的平台（微信公众平台，新浪微博，简书，百度打赏等）支持打赏功能，付费阅读时代越来越近，特此增加了打赏功能，支持微信打赏和支付宝打赏。 只需要 主题配置文件 中填入 微信 和 支付宝 收款二维码图片地址 即可开启该功能。 打赏功能配置示例 123reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！wechatpay: /path/to/wechat-reward-imagealipay: /path/to/alipay-reward-image 友情链接 由 iamwent 贡献编辑 主题配置文件 添加： 友情链接配置示例 12345# titlelinks_title: Linkslinks: MacTalk: http://macshuo.com/ Title: http://example.com/ 站点建立时间这个时间将在站点的底部显示，例如 © 2013 - 2015。 编辑 主题配置文件，新增字段 since。 配置示例 1since: 2013 设置「动画效果」NexT 默认开启动画效果，效果使用 JavaScript 编写，因此需要等待 JavaScript 脚本完全加载完毕后才会显示内容。 如果您比较在乎速度，可以将设置此字段的值为 false 来关闭动画。 编辑 主题配置文件， 搜索 use_motion，根据您的需求设置值为 true 或者 false 即可： 12use_motion: true # 开启动画效果use_motion: false # 关闭动画效果 设置「背景动画」NexT 自带两种背景动画效果 编辑 主题配置文件， 搜索 canvas_nest 或 three_waves，根据您的需求设置值为 true 或者 false 即可： 注意： three_waves 在版本 5.1.1 中引入。只能同时开启一种背景动画效果。 canvas_nest 配置示例 1234567# canvas_nestcanvas_nest: true //开启动画canvas_nest: false //关闭动画three_waves 配置示例# three_wavesthree_waves: true //开启动画three_waves: false //关闭动画 腾讯公益 404 页面 由 xirong 贡献腾讯公益404页面，寻找丢失儿童，让大家一起关注此项公益事业！ 效果如下 使用方法，新建 404.html 页面，放到主题的 source 目录下，内容如下： 123456789101112131415161718&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8;&quot;/&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://qzone.qq.com/gy/404/style/404style.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;script type=&quot;text/plain&quot; src=&quot;http://www.qq.com/404/search_children.js&quot; charset=&quot;utf-8&quot; homePageUrl=&quot;/&quot; homePageName=&quot;回到我的主页&quot;&gt; &lt;/script&gt; &lt;script src=&quot;https://qzone.qq.com/gy/404/data.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://qzone.qq.com/gy/404/page.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>静态博客</tag>
        <tag>NexT</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BCM94352z 驱动教程]]></title>
    <url>%2F2017%2F09%2F13%2FBCM94352z%E9%A9%B1%E5%8A%A8%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[黑苹果无线网卡 BCM94352z 驱动教程 添加仿冒 ID 启用蓝牙：1config.plist -&gt; Device -&gt; FakeID -&gt; WIFI 中填写 0x43a014e4 在 Clover 的配置文件 config.plist -&gt; Kernel and Kext Patches 添加以下代码块12345678910111213141516&lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;10.11+-BT4LE-Handoff-Hotspot-lisai9093&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;data&gt; SIX/dEdIiwc= &lt;/data&gt; &lt;key&gt;Name&lt;/key&gt; &lt;string&gt;IOBluetoothFamily&lt;/string&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;data&gt; Qb4PAAAA60Q= &lt;/data&gt;&lt;/dict&gt; 下载并安装驱动1234https://github.com/vit9696/Lilu/releaseshttps://bitbucket.org/RehabMan/os-x-fake-pci-id/downloads/ https://bitbucket.org/RehabMan/os-x-brcmpatchram/downloads/https://sourceforge.net/projects/airportbrcmfixup/files/?source=navbar 将以下驱动拷贝到 CLOVER/EFI/CLOVER/kexts/Other 文件夹下(由于 AirportBrcmFixup.kext 是依赖于 Lilu 运行的插件，所以还需要确保该目录下必须存在 Lilu.kext) 123456AirportBrcmFixup.kext FakePCIID.kext FakePCIID_Broadcom_WiFi.kext BrcmPatchRAM2.kext BrcmFirmwareData.kextLilu.kext 重建缓存123sudo rm -rf /System/Library/Caches/com.apple.kext.caches/Startup/kernelcachesudo rm -rf /System/Library/PrelinkedKernels/prelinkedkernelsudo touch /System/Library/Extensions/ &amp;&amp; sudo kextcache -u / 重启]]></content>
      <categories>
        <category>Hacintosh</category>
      </categories>
      <tags>
        <tag>黑苹果</tag>
        <tag>Hacintosh</tag>
        <tag>BCM94352z</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[低碳生活答题问题]]></title>
    <url>%2F2017%2F09%2F12%2F%E4%BD%8E%E7%A2%B3%E7%94%9F%E6%B4%BB%E7%AD%94%E9%A2%98%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[低碳生活答题问题 问题描述某电视台举办了低碳生活大奖赛。题目的计分规则相当奇怪： 1、每位选手需要回答10个问题（其编号为1到10），越后面越有难度。答对的，当前分数翻倍；答错了则扣掉与题号相同的分数（选手必须回答问题，不回答按错误处理）。 2、每位选手都有一个起步的分数为10分。 某获胜选手最终得分刚好是100分，如果不让你看比赛过程，你能推断出他（她）哪个题目答对了，哪个题目答错了吗？ 3、如果把答对的记为1，答错的记为0，则10个题目的回答情况可以用仅含有1和0的串来表示。例如：0010110011 就是可能的情况。 4、你的任务是算出所有可能情况。每个答案占一行。 解题思路一共十个问题，每个问题两种情况，要么对要么错，那么结果就会有 0000000000 ~ 1111111111 = pow（2，10）种，就可以用暴力搜索将所有情况枚举出来然后判断符合要求的情况； 分数的控制可以直接利用遍历所有情况的 for 循环分别判断两种情况； 如果用输出 1 代表回答正确， 0 代表错误，不难想到任何一个正整数对 2 取余结果只有 1 和 0 两种情况， 输出的时候也就成了进制转换问题； 代码实现1234567891011121314151617181920212223242526272829#include &lt;stdio.h&gt; #include &lt;math.h&gt; int main() &#123; int i,j; int score,temp; for(i=0;i&lt;pow(2,10);i++)&#123; temp=i; score=10; for(j=0;j&lt;10;j++)&#123; if(temp%2 == 1) score*=2; else score-=j+1; temp/=2; &#125; if(score==100)&#123; temp=i; for(j=0;j&lt;10;j++)&#123; printf(&quot;%d &quot;, temp%2); temp/=2; &#125; printf(&quot;\n&quot;); &#125; &#125; return 0;&#125; 运行结果1231 0 1 1 0 1 0 0 0 0 0 1 1 1 0 1 0 0 0 0 0 0 1 0 1 1 0 0 1 1]]></content>
      <categories>
        <category>Arithmetics</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>算法</tag>
        <tag>低碳生活答题问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AR956x 正确驱动方法]]></title>
    <url>%2F2017%2F09%2F10%2FAR956x%E6%AD%A3%E7%A1%AE%E9%A9%B1%E5%8A%A8%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[问题描述：许多朋友在装上黑果后自己的 AR956x 无线网卡驱动不了，或者驱动之后速度非常慢，又或者经常掉驱动，这个问题就是驱动方法造成的；这里我教给大家一种比较稳定的驱动方法。 准备工作：首先下载驱动，我给大家提供一下： 1链接: http://pan.baidu.com/s/1slAwYW9 密码: itya 具体方法如下：解压下载的 AR9565 压缩包，得到下面三个 kext 然后将他们拷贝到 /EFI/CLOVER/kexts/Other 接着进入到 /System/Library/Extensions 目录，删除IO80211开头的所有文件 然后打开 Kext Utility 输入密码等待重建缓存、修复权限完成就可以了，重启之后就会发现网卡已经驱动了，而且很稳定，只是每次升级系统都要进 SLE 删掉那两个文件重建缓存、修复权限。 下面是笔者的一个成功后的截图： 完工]]></content>
      <categories>
        <category>Hacintosh</category>
      </categories>
      <tags>
        <tag>黑苹果</tag>
        <tag>AR956x</tag>
        <tag>Hacintosh</tag>
        <tag>无线网卡</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最简单的客户机与服务器案例演示]]></title>
    <url>%2F2017%2F09%2F07%2F%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E5%AE%A2%E6%88%B7%E6%9C%BA%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A1%88%E4%BE%8B%E6%BC%94%E7%A4%BA%2F</url>
    <content type="text"><![CDATA[EchoClient.java12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879/* * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. */ package athlonreg.top;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.IOException;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.net.InetSocketAddress;import java.net.Socket;import java.net.SocketAddress;/** * * @author athlonreg */ public class EchoCilent &#123; /** * @param args the command line arguments */ public static void main(String[] args) &#123; // TODO code application logic here Socket clientSocket = null; BufferedReader in = null; BufferedWriter out = null; try &#123; //1.创建客户机套接字 clientSocket = new Socket(); SocketAddress remoteAddr=new InetSocketAddress(&quot;localhost&quot;,5000); System.out.println(&quot;1.创建客户机套接字成功！&quot;); //2.连接服务器 clientSocket.connect(remoteAddr); System.out.println(&quot;2.客户机连接服务器localhost端口5000成功！&quot;); System.out.println(&quot;客户机使用的地址和端口：&quot;+clientSocket.getLocalSocketAddress()); //与服务器会话 in = new BufferedReader( new InputStreamReader( clientSocket.getInputStream())); out = new BufferedWriter( new OutputStreamWriter( clientSocket.getOutputStream())); String sendStr=&quot;有朋自远方来&quot;; out.write(sendStr); //向服务器发送字符串 out.newLine(); out.flush(); System.out.println(&quot;3.1向服务器发送字符串成功!&quot;+sendStr); String recvStr=in.readLine(); //从服务器接收字符串 System.out.println(&quot;3.2从服务器接收回送字符串成功！&quot;+recvStr); &#125; catch (IOException ex) &#123; System.out.println(&quot;异常信息：&quot;+ex.getMessage()); &#125; //关闭套接字和流 try &#123; if (in != null) in.close(); if (out != null) out.close(); if (clientSocket != null) clientSocket.close(); System.out.println(&quot;4.关闭套接字和流成功！&quot;); &#125; catch (IOException ex) &#123; System.out.println(&quot;异常信息：&quot;+ex.getMessage()); &#125; &#125; &#125; EchoServer.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384/* * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. */ package athlonreg.top;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.IOException;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.net.InetSocketAddress;import java.net.ServerSocket;import java.net.Socket;import java.net.SocketAddress;/** * * @author athlonreg */ public class EchoServer &#123; /** * @param args the command line arguments * @throws java.io.IOException */ public static void main(String[] args) throws IOException &#123; // TODO code application logic here //1.启动服务器 ServerSocket listenSocket = null; Socket clientSocket = null; BufferedReader in = null; BufferedWriter out = null; try &#123; listenSocket = new ServerSocket(); SocketAddress serverAddr=new InetSocketAddress(&quot;localhost&quot;,5000); listenSocket.bind(serverAddr); System.out.println(&quot;1.服务器启动成功！开始在localhost的5000端口侦听连接...&quot;); //2.处理连接 clientSocket = listenSocket.accept(); System.out.println(&quot;2.客户机连接成功！客户机地址和端口：&quot;+clientSocket.getRemoteSocketAddress()); //3.与客户机会话 in = new BufferedReader( new InputStreamReader( clientSocket.getInputStream())); out = new BufferedWriter( new OutputStreamWriter( clientSocket.getOutputStream())); String recvStr=in.readLine(); //从客户机接收字符串 System.out.println(&quot;3.1 服务器收到字符串：&quot;+recvStr); out.write(recvStr); //向客户机回送字符串 out.newLine(); out.flush(); System.out.println(&quot;3.2 服务器回送字符串成功：&quot;+recvStr); &#125; catch (IOException ex) &#123; System.out.println(&quot;异常信息：&quot;+ex.getMessage()); &#125; //4.关闭套接字和流 try &#123; if (in != null) in.close(); if (out != null) out.close(); if (listenSocket != null) listenSocket.close(); if (clientSocket != null) clientSocket.close(); System.out.println(&quot;4.关闭套接字和流成功！&quot;); &#125; catch (IOException ex) &#123; System.out.println(&quot;异常信息&quot;+ex.getMessage()); &#125; &#125; &#125;]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>网络编程</tag>
        <tag>客户机与服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[加快黑苹果开机速度的一种方法]]></title>
    <url>%2F2017%2F09%2F05%2F%E5%8A%A0%E5%BF%AB%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%BC%80%E6%9C%BA%E9%80%9F%E5%BA%A6%E7%9A%84%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[加快黑苹果开机速度的一种方法 知识普及有的黑苹果重启速度特别慢（大约2、3分钟），这问题多半与Clover的 Reset Address 与 Reset Value 有关 ( 这里只针对 Clover ) 。 这个问题和 Reset Address 与 Reset Value 参数有关，这两个参数位于 Clover Configurator 的Acpi部分左下方。如果什么都不填默认值分别为：0x64与0xFE，即：重启通过PS控制器完成，PS控制器只有黑苹果才有，白苹果则是通过PCI实现，所以，如果你的电脑恰好也是通过PCI控制，那么就会有问题了。针对PCI这两个值应该填写：0x0CF9与0x06。 当然，还有一种更精确找到该值的办法，就是我们要用到的唯一一个表单，就是FACP这个表。 准备工作首先利用 CLOVER 在引导界面按 F4 或者 Fn+F4 提取原始 ACPI 表单，提取出来的表单就在 /EFI/CLOVER/ACPI/origin 开工提取 Reset Address 和 Reset Value 值用 MaciASL 打开 FACP 这个表单，Command + F 搜索 Reset Register ， Address 值和 Value to cause reset 值就是我们所说的 PCI 需要设定的两个值，如图高亮处： 设定Reset Address 和 Reset Value 值提取出来这两个值后就要修改 config 了，用 Clover Configurator 打开你的 config ，如图位置填上提取到的两个值： 保存重启就可以了. 完工]]></content>
      <categories>
        <category>Hacintosh</category>
      </categories>
      <tags>
        <tag>黑苹果</tag>
        <tag>Hacintosh</tag>
        <tag>开机速度</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用 AppleIntelInfo 查看变频]]></title>
    <url>%2F2017%2F09%2F05%2F%E5%88%A9%E7%94%A8%20AppleIntelInfo%20%E6%9F%A5%E7%9C%8B%E5%8F%98%E9%A2%91%2F</url>
    <content type="text"><![CDATA[很多朋友在查看自己机器变频时利用 CPU-S 发现并不准确，这里我教给大家一种比较准确的方法—-利用 AppleIntelInfo 查看变频 开工首先下载 AppleIntelInfo 源码编译，打开终端，输入：1cd ~/Desktop 回车继续敲： 1git clone https://github.com/athlonreg/AppleIntelInfo.git 回车后就把 AppleIntelInfo 源码下载在桌面了 然后打开 AppleIntelInfo 的工程文件进行编译生成 .kext 内和扩展文件，这一部分这里不再赘述，如果不会的话参考我的另一个帖子，里面有提到，链接在这(后面的汉字也是地址的一部分哦)： 1http://athlonreg.top/2017/08/31/解决Lilu造成的一些问题/ 将编译后的 AppleIntelInfo.kext 放到桌面 然后开始利用命令行看变频数据打开终端，输入： 1cd ~/Desktop 回车后继续敲 1sudo chown -R root:wheel AppleIntelInfo.kext 回车会提示输入密码，输入之后回车继续敲： 1sudo kextutil AppleIntelInfo.kext 再回车，接着敲： 1sudo cat /tmp/AppleIntelInfo.dat 回车之后变频数据就出来了，例如我的机器： 一般我们只看最后一行就可以了哦 比如我的机器就是 800、 1000、 …… 、 2700 ，单位是MHz，正好符合我的机器，最低 800MHz ，最高2.4GHz，可超频到2.7GHz。 完工行胜于言，快去试试你的机器是不是变频正常吧！！]]></content>
      <categories>
        <category>Hacintosh</category>
      </categories>
      <tags>
        <tag>黑苹果</tag>
        <tag>Hacintosh</tag>
        <tag>AppleIntelInfo</tag>
        <tag>变频</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[金币阵列问题]]></title>
    <url>%2F2017%2F09%2F03%2F%E9%87%91%E5%B8%81%E9%98%B5%E5%88%97%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[金币阵列问题 问题描述有m*n枚金币在桌面上排列成一个m行n列的金币阵列。每一枚金币或正面朝上，或背面朝上。用数字表示金币状态，0表示正面朝上，1表示背面朝上。 金币阵列游戏的规则1、每次将任一行金币翻过来放在原来的位置上;2、每次可以任选2列，交换这2列金币的位置. 任务给定金币的初始状态和目标状态，编程计算按金币游戏规则，将金币排列从初始状态变换到目标状态所需的最少变换次数。 思路本例的实质是将一个二进制矩阵从一种形式利用相应规则变换到另一种形式。提供的规则有两种：1、将某一行的金币翻转;2、将某两列进行交换。 在这两种操作中，第一种操作可能会影响到某一行或者某一列中已经排列好的相关元素，因此，首先利用该规则进行变换，而后续的操作则不再利用该规则。 那么在程序中应该如下操作：1、将矩阵中的每一列作为第1列，并利用第一个规则将第1列中的相关元素与目标矩阵中第1列的元素进行配对，如果不相同，则利用每1个规则进行翻转； 2、从第2列开始，将处理后的列与目标列进行比较，如果相同，则转下一列；如果不同，看是否可以通过列的交换完成，如果可以，则继续扫描，否则无解。 代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990#include &lt;stdio.h&gt;#define row 4#define col 3int source[row][col] = &#123;1,0,1,0,0,0,1,1,0,1,0,1&#125;; //sourceint target[row][col] = &#123;1,0,1,1,1,1,0,1,1,1,0,1&#125;; //targetint temparr[row][col];nt number = 0; //转换的次数int minnum = 9999;void raw_change(int i) &#123; //行翻转 int j; for(j=0; j&lt;col; j++) &#123; temparr[i][j] = 1-temparr[i][j]; &#125; number++;&#125;void col_exchange(int i, int j) &#123; //列交换 int temp, k; int temp, k; for(k=0; k&lt;row; k++) &#123; temp = temparr[k][i]; temparr[k][i] = temparr[k][j]; temparr[k][j] = temp; &#125; if(i != j) number++; &#125;int judge(int i, int j) &#123; //temparr的i列是否和target的j列相同 int flag; for(int k=0; k&lt;row; k++) &#123; flag=1; if(temparr[k][i] != target[k][j]) &#123; flag=0; break; &#125; &#125; return flag;&#125;int main() &#123; // insert code here... int i,j,k; for(i=0; i&lt;col; i++) &#123; //代表source的列 for(j=0; j&lt;row; j++) &#123; for(k=0; k&lt;col; k++) &#123; temparr[j][k] = source[j][k]; //给替身数组赋值 &#125; &#125; number=0; col_exchange(0,i); //temparr数组的列先做交换，把其他列放到第一列的位置 for(j=0; j&lt;row; j++) &#123; //判断temparr的0号列和target的0号列是否相同，不同则翻转 if(temparr[j][0] != target[j][0]) &#123; raw_change(j); //如果第1列不匹配，那么行全部翻转 &#125; &#125; int found; for(j=0; j&lt;col; j++) &#123; //代表target，从第2行开始，到最后一行 found=0; for(k=j; k&lt;col; k++) &#123; //代表temparr，从第2行开始，直到最后一行 if(judge(k, j)) &#123; found=1; col_exchange(k, j); break; &#125; &#125; if(!found) &#123; break; &#125; &#125; if(found) &#123; minnum=number; &#125; &#125; if(minnum&lt;9999) &#123; printf(&quot;一共变换%d次！\n&quot;, minnum); &#125; else&#123; printf(&quot;无解！\n&quot;); &#125; return 0;&#125;]]></content>
      <categories>
        <category>Arithmetics</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>算法</tag>
        <tag>金币阵列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How to use xcode-select in terminal]]></title>
    <url>%2F2017%2F09%2F03%2FHow%20to%20use%20xcode-select%20in%20terminal%2F</url>
    <content type="text"><![CDATA[How to use xcode-select in terminal It’s not uncommon developers to have multiple versions of Xcode installed. For example, I typically have the latest beta as well as the most current production release installed.However, there are times when you may want various tools, such as xcodebuild, to point to a specific Xcode folder. To faciliate this, you can use xcode-select. A common use case is if you use scripts and/or makefiles to build your projects.Once you set the Xcode folder, xcodebuild will be invoked from the folder you specified.The command line options are below: 1234xcode-select [-help]xcode-select [-switch xcode_folder_path]xcode-select [-print-path]xcode-select [-version] Here is how to print the current Xcode path:12$ xcode-select --print-path/Developer/Applications/Xcode.app Line number 2 shows the current version of Xcode that is ‘active.’ If you are accessing xcodebuild or other related tools from a script, –print-path is the preferred means to determine the current Xcode location.Use the -switch option to change to another version of Xcode on your system: 1$ sudo xcode-select --switch /Applications/Xcode-beta.app/Contents/Developer This changes to the Xcode-beta 9 on my system. Note that root access is required to set the Xcode location, thus I have used sudo to execute the command as root.Printing the path now looks as follows: 12$ xcode-select --print-path/Applications/Xcode-beta.app/Contents/Developer To switch back to Xcode installed in the /Applications directory:1$ sudo xcode-select -switch /Applications/Xcode.app/ You can read more about xcode-select by view the man page from a terminal:1$ man xcode-select]]></content>
      <categories>
        <category>Hacintosh</category>
      </categories>
      <tags>
        <tag>终端</tag>
        <tag>Mac</tag>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[字典序问题]]></title>
    <url>%2F2017%2F08%2F31%2F%E5%AD%97%E5%85%B8%E5%BA%8F%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[字典序问题 问题描述在数据加密和数据压缩中常需要对特殊的字符串进行编码。给定的字母表A由26个小写字母组成。该字母表产生的升序字符串中字母从左到右出现的次序与字母在字母表中出现的次序相同，且每个字符最多出现1次。例如，a,b,ab,bc,xyz等字符串都是升序字符串。现在对字母表中产生的所有长度不超过6的升序字符串，计算它在字典中的编码。 思路首先判断字符串长度为3，先算长度为1和2的所有情况，即从26个字母中选1个或两个字母，因为是升序，即sum=C（26，1）+C（26，2）； 之后再看字符串的第一个字符，为’d’,之前有以a,b,c开头的长度为3的字符串，以a开头，后边2位需要在25个字母中选择（除了a），以b开头的后2位需要在24个字母中选择（除了a,b），以c开头的在23个字母（除了a,,b,c）中选择，即sum+=(C(25,2)+C(24,2)+C(23,2)); 然后再看下一个字母’g’，d与g之间有e,f,需要算以de开头以及以df开头的所有情况，即sum+=(C(21,1)+C(20,1))； 最后再加上h-‘a’+1; 代码实现1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include &lt;stdio.h&gt;#include &lt;string.h&gt;int getCombinatorialNumber(int m, int n) &#123; int n_Product=1, m_Product=1; int i; for(i=1; i&lt;=n; i++) n_Product*=i; for(i=m; i&gt;m-n; i--) &#123; m_Product*=i; return m_Product/n_Product; &#125;&#125;int main(int argc, const char * argv[]) &#123; int number; //要统计字符串的个数 int sum; //存放字符串的序号 int length; char str[10]; //存放字符串 int a[10]; //存放字符串的每一位字符的值 int i, j; scanf(&quot;%d&quot;, &amp;number); while(number--) &#123; getchar(); sum=1; scanf(&quot;%s&quot;, str); length=(int)strlen(str); for(i=1; i&lt;length; i++) &#123; sum += getCombinatorialNumber(26, i); //小于字符串长度的字符串个数 &#125; for(i=0; i&lt;length; i++) &#123; a[i]=str[i]-96; //计算每个字符从a开始的序号数值, a~z分别对应1~26 //printf(&quot;%d &quot;, a[i]); &#125; //printf(&quot;%d\n&quot;, f(26, 2)); int temp=1; for(i=length; i&gt;0; i--) &#123; for(j=temp; j&lt;a[length-i]; j++) &#123; sum += getCombinatorialNumber(26-j, i-1); //依次扫描字符，计算所有情况 &#125; temp=a[length-i]+1; &#125; printf(&quot;%d\n&quot;, sum); &#125; return 0;&#125;]]></content>
      <categories>
        <category>Arithmetics</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>算法</tag>
        <tag>字典序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DSDT SSDT 简单提取修复]]></title>
    <url>%2F2017%2F08%2F30%2FDSDT%20SSDT%E7%AE%80%E5%8D%95%E6%8F%90%E5%8F%96%E4%BF%AE%E5%A4%8D%2F</url>
    <content type="text"><![CDATA[DSDT SSDT 简单提取修复 开工准备工作首先在 CLOVER 引导界面按 F4 或者 FN + F4 提取原始表单，然后进入 Mac ，利用 Clover Configurator 挂载ESP分区，提取的表单就在 /EFI/CLOVER/ACPI/origin ,将 origin 整个拷贝到桌面，并删除 origin 中除 DSDT SSDT 以外的所有文件 然后下载要用到的工具 12iasl：https://bitbucket.org/RehabMan/acpica/downloads/MaciASL：链接:http://pan.baidu.com/s/1pKAksR5 密码:nxyr 将 iasl 放到 /usr/bin 然后安装 MaciASL 并添加补丁源： Rehabman 补丁源： 12Name：RehabMan Laptop URL：http://raw.github.com/RehabMan/Laptop-DSDT-Patch/master 打开终端，输入： 1cd ~/Desktop/origin 回车 然后输入: 1iasl –da –dl *.aml 回车 这时打开桌面的 origin 文件夹会发现多出了很多 .dsl 文件，我们要用到的就是这些文件 先不要急，终端继续执行 1rm –rf *.aml 回车 然后执行: 1rm –rf *x.dsl 回车，这时就会发现终端只剩下了不带 x 的 dsl 文件 开始操作然后用 MaciASL 打开 DSDT.dsl 点 Compile 编译后会弹出错误的窗口： 点这些错误就会定位到错误的代码位置 这里说一下常见的错误修复方法: 1、 PARSEOP_ZERO 错误，定位后会发现一堆 zero 代码，直接将他们删掉即可2、 Unexpected ‘}’ 错误： 定位后是这样： 我们会发现这个错误位于 ADBG 的方法下，这时只需打个补丁即可： 点Patch 找到 Fix ADBG Error 点一下，然后 Apply 应用即可，这时我们会发现再编译就没有错误了(警告可以不用管)，然后保存成aml文件 Save 即可，其他 SSDT 文件也是一样的操作 修改完成在修改完所有表单的错误并保存成aml格式后，将这些 aml 文件放到 /EFI/CLOVER/ACPI/patched 就可以了 完工]]></content>
      <categories>
        <category>Hacintosh</category>
      </categories>
      <tags>
        <tag>DSDT</tag>
        <tag>SSDT</tag>
        <tag>编译</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AppleALC-ALCPlugFix]]></title>
    <url>%2F2017%2F08%2F29%2FAppleALC-ALCPlugFix%2F</url>
    <content type="text"><![CDATA[简单制作 AppleALC 驱动声卡并解决耳机、外放切换、麦克风无输入以及耳机杂音问题 首先下载 AppleALC 源码，打开终端输入： 1git clone https://github.com/vit9696/AppleALC 回车之后就将 AppleALC 下载到了你的用户根目录 然后下载 Lilu ： 1链接:http://pan.baidu.com/s/1c2yB3vq 密码:if62 将下载的 Lilu 中 Debug 里面的 Lilu.kext 放进 AppleALC 源码根目录，然后删除 /AppleALC/Resources 中多余文件夹，只留下你的声卡型号文件夹、 Pinconfigs.kext 以及四个 plist 文件，以 cx20751 为例剩下如下文件 然后打开计算器，显示为编程器 打开你的 Codec ，找到 Vendor Id ，拷贝后面的字符串，在计算器选中十六进制，粘贴这个字符串 然后选中十进制，就换转换成十进制形式 拷贝这个十进制数，打开 /AppleALC/Resources/CX20751_2/Info.plist （此处的 CX20751_2 需要换成你的声卡型号），把 codecid 换成刚才拷贝的十进制数 保存退出，右键 PinConfigs.kext 显示包内容，打开里面的 Info.plist ，搜索刚才拷贝的十进制数，记下 LayoutID 数据，有几个记几个，都记下来，然后将 IOKitPersonalities-&gt;HDA Hardware Config Resource-&gt;HDAConfigDefault 中的其他型号删除，（为避免出错，这里的删除可以不操作，删除只是为了精简做出来的 AppleALC ），保存退出。 然后双击打开 AppleALC 中的工程文件： 按图示操作 点击右面的 export next where 填上桌面，点 export 就生成 AppleALC 在桌面上了，一层一层打开它，将其中的 AppleALC.kext 放到 clover 驱动目录，注意之前下载的 Lilu 里面的Release中 Lilu.kext 也要放到 clover 驱动目录，最后不要忘了在 config 注入 LayoutID ： 如图 Audio 处写上刚才记下的 LayoutID 到这里 AppleALC 的制作就完了，如果重启后你的声卡不能驱动，就挨个试刚才记录的所有 ID ，如果能驱动但无法做到插入耳机自动切换，接着往下看： 打开终端，输入 1git clone https://github.com/goodwin/ALCPlugFix 回车就将ALCPlugFix下载到了你的用户目录，打开此目录中的 ALCPlugFix 中的 main.m 下拉到最下方，注意这一部分： 下载 had-tools ,将 codec 复制到 had-tools 目录，打开终端， cd 到此目录，输入 1./widget_dump.sh codec.txt 回车，此处 codec.txt 要根据你的 codec 名字来，回车可以看到以下输出： 找到 nid = 0x19 和 nid = 0x1a ,这里我的 19 为 line in ， 1a 为 mic in ，记录下最后两位，我的是 04 和 24 就这么改 保存退出，双击按照 AppleALC 的编译方法编译这个 然后将生成的 ALCPlugFix 替换 alc_fix 中的 ALCPlugFix ，终端 cd 到 alc_fix 目录，执行 1./install.sh 耳机就可以自动切换了，三节点的朋友运气好的话杂音应该也解决了，这时插入耳机在执行 1./widget_dump.sh codec.txt 就可以发现之前的 19 和 1a 后面的数据反过来了 如果不行重启一次应该就好了。]]></content>
      <categories>
        <category>Hacintosh</category>
      </categories>
      <tags>
        <tag>黑苹果</tag>
        <tag>Hacintosh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[统计数字问题]]></title>
    <url>%2F2017%2F08%2F29%2F%E7%BB%9F%E8%AE%A1%E6%95%B0%E5%AD%97%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[统计数字问题 问题描述一本书的页码从自然数 1 开始计数，直到自然数 n 。书的页码按照通常的习惯编排，每个页码都不包含多余的前导数字 0 。例如，第 6 页用数字 6 表示，而不是 06 或 006 等。数字计数问题要求对给定书的总页码 n ，计算出书的全部页码中分别用到多少次数字 0，1，2，…，9 。 思路:暴力求解。本题关键在于将每一页码的数字进行分解，这种方式可以利用整数的除法和对10取余计算。 代码实现123456789101112131415161718192021222324252627282930313233343536#include &lt;stdio.h&gt;#include &lt;math.h&gt; int main(int argc, const char * argv[]) &#123; // insert code here... int array[10] = &#123;0&#125;; //存放0~9出现的次数 int low, temp, high; //以temp为分割点 将页数分为三部分 high和low分别代表高位和低位的数值 int paginations; //存放总页数 int i, j; printf(&quot;一共多少页: &quot;); scanf(&quot;%d&quot;, &amp;paginations); int count = 0; //存放除去最高位后总页码的位数 count = (int)log10(paginations); for(i = count; i &gt;= 0; i --) &#123; //i表示低位（low）的位数 low = paginations % (int)pow(10, i); //计算low的数值 temp = paginations / (int)pow(10, i) % 10; //计算temp的数值 high = paginations / (int)pow(10, i + 1); //计算high的数值 for(j = 0; j &lt; temp; j ++) array[j] += (high + 1) * pow(10, i); //计算 0&lt;中间位&lt;temp 出现的次数 array[temp] += high * pow(10, i) + low + 1; //计算 中间位=temp 出现的次数 for(j = temp + 1; j &lt; 10; j ++) //计算 temp&lt;中间位&lt;9 出现的次数 array[j] += high * pow(10, i); &#125; for(i = count; i &gt;= 0; i --) //除去多统计的a[0]出现的次数 array[0] -= pow(10, i); printf(&quot;0~9分别出现的次数为:\n&quot;); for(i = 0; i &lt; 10; i ++) //打印0~9分别出现的次数 printf(&quot;%d\n&quot;, array[i]); return 0;&#125;]]></content>
      <categories>
        <category>Arithmetics</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>算法</tag>
        <tag>统计数字</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac下搭建 Java 开发环境]]></title>
    <url>%2F2017%2F08%2F28%2FMAC%E6%90%AD%E5%BB%BAJava%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[Mac 下搭建 Java 开发环境 安装 jdkMac系统自带jdk，但是版本比较老，我们可以去官网下载最新的Jdk，安装比较简单，这里不再赘述。 配置 jdk 环境变量打开终端输入 vim ~/.bash_profile 回车，然后按i进入编辑模式，在最后面输入以下内容： 1234567JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/HomePATH=$JAVA_HOME/bin:$PATH:.CLASSPATH=JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:.export JAVA_HOMEexport PATHexport CLASSPATH 按下 esc ，然后输入 :wq 回车，保存退出 然后输入 source ~/.bash_profile 回车文件修改就生效了。 输入 java -version 回车可以查看 Java 版本，whereis java 可以查看 Java 位置，echo $JAVA_HOME 可以打印出 JAVA_HOME 。 安装eclipse为了更方便的进行开发工作，我们还需要安装Eclipse，去官网下载完成后解压，把.app文件拖进应用程序(Application)就可以了，然后创建一个workspace，也就是工作目录，用来存放工作代码。]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Java</tag>
        <tag>搭建</tag>
        <tag>环境</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F08%2F08%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Study</category>
      </categories>
  </entry>
</search>
